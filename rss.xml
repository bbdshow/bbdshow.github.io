<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>bbdshow</title>
        <link>https://www.bbdshow.top/</link>
        <description>bbdshow</description>
        <generator>Hugo 0.105.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>https://github.com/bbdshow (bbdshow)</managingEditor>
        
        
            <webMaster>https://github.com/bbdshow (bbdshow)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Fri, 11 Nov 2022 20:54:11 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://www.bbdshow.top/rss.xml" />
        
        
            <item>
                <title>Gitlab CI/CD Docker容器化部署</title>
                <link>https://www.bbdshow.top/posts/tools/gitlab-runner/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/tools/gitlab-runner/</guid>
                <pubDate>Fri, 18 Dec 2020 15:06:20 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<blockquote>
<p>懒有时是一种进步！</p>
</blockquote>
<p>之前使用Dokcer就是基于公司的发布平台，使用的比较浅，也就是写Dockerfile，而对于Golang项目，Dockerfile编写相对简单，所以造就就Docker使用一直不太深入。即使是现在，也还停留在使用层面。对于原理更深的东西没有过多的研究。路一步步走，知识一点点更新吧。</p>
<blockquote>
<p>脱去平台的外衣，还能剩什么，很多东西就要自己构建实施啦。</p>
</blockquote>
<h2 id="基础环境">基础环境</h2>
<ol>
<li>gitlab仓库 gitlab-runner CI 运行环境</li>
<li>docker  docker-compose harbor(docker私有仓库)</li>
<li>Linux 虚拟机，CentOS Alpine 发行版本</li>
<li>go version 1.14+</li>
</ol>
<h2 id="目标">目标</h2>
<ol>
<li>实现代码提交，自动更新构建，容器运行在测试环境的机器上</li>
<li>脚本尽可能写的简单清晰。容器镜像偏小。</li>
</ol>
<h2 id="实施步骤">实施步骤</h2>
<ol>
<li>基础资源部署：
<ol>
<li>gitlab-runner 注册配置</li>
<li>指定Build机器，安装Docker环境</li>
<li>安装私有镜像仓库及设置相关配置</li>
</ol>
</li>
<li>准备Demo
<ol>
<li>准备golang demo， 尽可能遵行 golang/project-layout</li>
<li>编写Build脚本及deploy脚本</li>
<li>推送代码，调试测试脚本等。</li>
</ol>
</li>
</ol>
<h2 id="具体实施">具体实施</h2>
<p><strong>所有部署性的东西，都简单说，只说注意事项，减免弯路，以 Alpine Linux 为例</strong></p>
<h3 id="先解答一些疑惑">先解答一些疑惑？</h3>
<p>Q: <strong>为什么选择使用 Alpine Linux作为Build机器？</strong></p>
<p>A:</p>
<ol>
<li>能够较轻松的使用 Alpine(很适合Golang运行及分发) Docker镜像，编译运行使用的Linux发行版本一致，不容易出奇怪的问题。</li>
<li>Golang 因为cgo的原因，编译需要 gcc, 比如你在CentOS的机器上编译成 运行文件，然后COPY到 Alpine 容器内，会运行不起来的，报错
<blockquote>
<p>standard_init_linux.go:178: exec user process caused “no such file or directory”</p>
</blockquote>
</li>
</ol>
<p>Q: <strong>为什么不使用 Docker 的多次构建，使用 golang:alpine 镜像作为 builder 容器？</strong></p>
<p>A:</p>
<ol>
<li>这样确实也是一种比较好的实施方案，而且也不依赖于宿主机必须为 Alpine Linux，但是通过实践，我因为 go mod 与 docker 的缓存机制而放弃了。如果使用docker multi builder。 最大程度的使用 cache 就是让 go mod download 命令能够在 go.mod 与 go.sum 不变更的情况下，docker build 缓存一层。 但是作为构建机器，肯定会有多个项目构建，那么每一个项目对应都会有一次 go mod 的cache，这样会导致Docker<em>缓存层占用空间快速的放大</em>。而且还不能执行 docker image prune -f 清理 <none>:<none> 这种中间镜像。清理了，就意味着，要重新 go mod download 一次，这对网络也是一个不小的挑战。</li>
<li>当我们 go.mod 可能只有一个很小的变动，升级一个包的版本，那么也将面临，整个依赖包重新下载。增加构建时间。</li>
<li>如果我们在宿主机上面构建，那么因为 go mod 的cache机制，我们每次可能只用更新需要的代码，而且各个项目如果使用相同版本的包，就不会重复获取，极大节约磁盘空间。</li>
<li>这样做也有<strong>缺点</strong>，就是所有依赖的 go 版本都变成一致的了。 不过可以通过不同的 gitlab-runner 解决问题。 有必要也可以 multi builder 不冲突</li>
</ol>
<p><strong>当Alpine(空白机器|网络正常)需要安装的最基础包</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 更换镜像源 </span>
</span></span><span class="line"><span class="cl">cp /etc/apk/repositories /etc/apk/repositories.bak <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">&#39;http://mirrors.ustc.edu.cn/alpine/v3.12/main
</span></span></span><span class="line"><span class="cl"><span class="s1">http://mirrors.ustc.edu.cn/alpine/v3.12/community&#39;</span> &gt; /etc/apk/repositories<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用过程中，缺哪样再补哪样吧</span>
</span></span><span class="line"><span class="cl">apk update <span class="o">&amp;&amp;</span> apk add --no-cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>git <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>go <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>make <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>wget <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>docker <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>docker-compose <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>gitlab-runner <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装bash是因为 gitlab-runner 依赖bash</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="gitlab-runner">gitlab-runner</h3>
<p><a href="https://docs.gitlab.com/runner/">参考文档</a></p>
<p>gitlab-ci持续集成环境(类Jenkins) <a href="https://docs.gitlab.com/ee/ci/quick_start/README.html">Gitlab开启CI/CD</a></p>
<p>gitlab-runner 就是一个编译环境(提供 Shell、docker、k8s)。我们编译过程中，<strong>Shell</strong>执行环境就能满足多数情况，而且更加简单。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># alpine 是依赖 openrc 作为初始化系统</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 设置开机启动</span>
</span></span><span class="line"><span class="cl">rc-update add gitlab-runner boot
</span></span><span class="line"><span class="cl"><span class="c1"># 这个时候，可以去 /etc/init.d/gitlab-runner 查看具体配置， 建议修改如下</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/sbin/openrc-run</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#supervisor=supervise-daemon</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#description=&#34;GitLab CI Runner&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#name=&#34;Gitlab Runner&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#command=&#34;/usr/bin/gitlab-runner&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#command_args=&#34;run --working-directory /root/runner --config /etc/gitlab-runner/config.toml&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#command_user=&#34;root&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#depend() {</span>
</span></span><span class="line"><span class="cl"><span class="c1">#	need net</span>
</span></span><span class="line"><span class="cl"><span class="c1">#}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 注册Runner到gitlab上,根据交互式命令输入相关</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Token的获取，在gitlab上，设置 CI/CD Pages</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 交互式命令输入完成后，就可以查看 /etc/gitlab-runner/config.toml</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 注意选择 runner executor 时，选择 Shell </span>
</span></span><span class="line"><span class="cl">gitlab-runner register 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1">#启动</span>
</span></span><span class="line"><span class="cl">rc-service gitlab-runner start
</span></span><span class="line"><span class="cl"><span class="c1">#查看状态</span>
</span></span><span class="line"><span class="cl">rc-service gitlab-runner status
</span></span></code></pre></td></tr></table>
</div>
</div><p>这时去看Gitlab项目CI/CD设置里面，是否已经注册成功</p>
<h4 id="常见问题">常见问题</h4>
<p><strong>Q: runner 状态黑色小感叹号 New runner. Has not connected yet</strong></p>
<p>A: gitlab-runner verify  执行验证一下</p>
<p><strong>Q: 未注册成功</strong></p>
<p>A: 检查Token是否填入正确， 配置生成的Token和你填入的Token是不一样的。检查URL（gitlab Hostname）是否填入正确</p>
<h3 id="harbor-私有dokcer镜像仓库">Harbor 私有Dokcer镜像仓库</h3>
<p><a href="https://github.com/goharbor/harbor">Harbor github</a>，下载Release版本，里面有镜像包</p>
<ol>
<li>解压安装包</li>
<li>执行 prepare 文件</li>
<li>执行 install.sh</li>
<li>cp harbor.yml.tmpl harbor.yml 修改你想要的参数</li>
<li>使用 docker-compose 启动就行</li>
</ol>
<h3 id="dokcer安装">Dokcer安装</h3>
<p>没什么太好说的，直接使用 rc-update add docker boot &amp;&amp; rc-service docker start 启动就好了。</p>
<p>这里注意修改一下配置 /etc/docker/daemon.json (重启, docker info 查看一下是否已更改)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;你的国内镜像源，推荐 aliyun&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">     <span class="nt">&#34;insecure-registries&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;在Harbor没有开启HTTPS的情况下,你的私有仓库地址。 例 harbor.xxxx.com:80&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>docker login -u admin -p xxxx harbor.xxxx.com:80 这样登录到你自己搭建的私有仓库中</p>
</blockquote>
<h3 id="创建一个项目-demo-编写相关的脚本进行演练">创建一个项目 Demo ，编写相关的脚本，进行演练</h3>
<p>目录结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">├── .gitignore
</span></span><span class="line"><span class="cl">├── .gitlab-ci.yml
</span></span><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── build.sh
</span></span><span class="line"><span class="cl">├── cmd
</span></span><span class="line"><span class="cl">│   ├── api
</span></span><span class="line"><span class="cl">│   │   └── main.go
</span></span><span class="line"><span class="cl">│   └── task
</span></span><span class="line"><span class="cl">│       └── main.go
</span></span><span class="line"><span class="cl">├── configs
</span></span><span class="line"><span class="cl">│   ├── config.toml
</span></span><span class="line"><span class="cl">│   └── config_release.toml
</span></span><span class="line"><span class="cl">├── deploy.sh
</span></span><span class="line"><span class="cl">├── docs
</span></span><span class="line"><span class="cl">│   └── README.md
</span></span><span class="line"><span class="cl">├── go.mod
</span></span><span class="line"><span class="cl">├── go.sum
</span></span><span class="line"><span class="cl">└── pkg
</span></span><span class="line"><span class="cl">    ├── api
</span></span><span class="line"><span class="cl">    │   ├── api.go
</span></span><span class="line"><span class="cl">    │   ├── handler_func.go
</span></span><span class="line"><span class="cl">    │   └── route.go
</span></span><span class="line"><span class="cl">    ├── common
</span></span><span class="line"><span class="cl">    │   └── model
</span></span><span class="line"><span class="cl">    │       └── model.go
</span></span><span class="line"><span class="cl">    ├── config
</span></span><span class="line"><span class="cl">    │   └── config.go
</span></span><span class="line"><span class="cl">    ├── httputil
</span></span><span class="line"><span class="cl">    │   ├── errors.go
</span></span><span class="line"><span class="cl">    │   └── response.go
</span></span><span class="line"><span class="cl">    └── task
</span></span><span class="line"><span class="cl">        └── task.go
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面demo，将会启动2个容器， task 与 api</p>
<h4 id="gitlab-ciyml">.gitlab-ci.yml</h4>
<p>这个是Gitlab开启CI/CD的必要条件，也是告诉 gitlab-runner 应该怎么做。<a href="https://docs.gitlab.com/ee/ci/yaml/">gitlab-ci.yml</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># 提前设置一些常量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">variables</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">IMAGE</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor.xxxx.com:8000/library/release/layout:latest&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 定义阶段，我这里定义了 构建阶段 和 部署阶段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">stages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 构建Docker镜像的 JOB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">build_docker</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stage</span><span class="p">:</span><span class="w"> </span><span class="l">build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">before_script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">export ENV=release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 设置配置文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">mv configs/config_${ENV}.toml configs/config.toml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 在这里也可以根据 git 信息，设置 image:tag</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 执行Makefile 里面的 build 文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">make build IMAGE=$IMAGE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 这个JOB在 下面这个 runner 里面运行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">go_docker_alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">only</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 一种限制规格，只在 master 有变法时，执行此JOB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 部署Docker镜像的 JOB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">deploy-docker</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 部署阶段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stage</span><span class="p">:</span><span class="w"> </span><span class="l">deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># （构建机器与目标机器ssh能通）去部署的目标机器 创建一些必要目录，然后执行部署脚本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ssh dev-cd-114 &#34;mkdir -p /root/apps/layout&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">scp -r deploy.sh dev-cd-114:/root/apps/layout/deploy.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ssh dev-cd-114 &#34;cd /root/apps/layout &amp;&amp; chmod +x deploy.sh &amp;&amp; ./deploy.sh $IMAGE&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">go_docker_alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">only</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">master</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在执行的时候，可以通过 gitlab Page 查看CI/CD的过程，以便排查BUG等。</p>
<h4 id="makefile-文件">Makefile 文件</h4>
<p>因为是这里的Makefile 写的很简单，就是执行了一个 build.sh ，在这里引入Makefile是因为未来它可以做更多的工作。</p>
<h4 id="buildsh">build.sh</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">exec_image</span><span class="o">=</span><span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="p">;</span><span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nv">exec_image</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s1">&#39;image:tag required&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;process image name: </span><span class="nv">$exec_image</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -eux<span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="nb">export</span> <span class="nv">GOPROXY</span><span class="o">=</span><span class="s2">&#34;https://goproxy.io,direct&#34;</span><span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="nb">export</span> <span class="nv">GOPRIVATE</span><span class="o">=</span><span class="s2">&#34;gitlab.xxxx.com&#34;</span><span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        go version <span class="o">&amp;&amp;</span> go mod download<span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        mkdir -p ./bin <span class="o">&amp;&amp;</span> rm -r ./bin<span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="c1"># shellcheck disable=SC2006</span>
</span></span><span class="line"><span class="cl">        go build -ldflags <span class="s2">&#34;-s -w -X &#39;main.buildTime=`date`&#39; -X &#39;main.goVersion=`go version`&#39;&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                -o bin/layout_task cmd/task/main.go <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="p">;</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="c1"># shellcheck disable=SC2006</span>
</span></span><span class="line"><span class="cl">        go build -ldflags <span class="s2">&#34;-s -w -X &#39;main.buildTime=`date`&#39; -X &#39;main.goVersion=`go version`&#39;&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>            -o bin/layout_api cmd/api/main.go <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  docker build -t <span class="s2">&#34;</span><span class="nv">$exec_image</span><span class="s2">&#34;</span> .<span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>
</span></span><span class="line"><span class="cl">  <span class="c1"># docker image prune -f; \</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 把镜像推送到 private register</span>
</span></span><span class="line"><span class="cl">  docker push <span class="s2">&#34;</span><span class="nv">$exec_image</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="dockerfile">Dockerfile</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># 也可以多次构建多次构建的示例，这样写docker build 可以cache到 go mod download 这一层RUN</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#FROM harbor.xxx.com:8000/library/golang-builder:latest as builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#WORKDIR /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#COPY go.mod .</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#COPY go.sum .</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#RUN set -eux; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#      export GOPROXY=&#34;https://goproxy.io,direct&#34;; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#      export GOPRIVATE=&#34;gitlab.xxx.com&#34;; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#      go version &amp;&amp; go mod download \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#      ;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#COPY . .</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#RUN set -eux; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#        mkdir -p ./bin; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#        go build -ldflags &#34;-s -w -X &#39;main.buildTime=`date`&#39; -X &#39;main.goVersion=`go version`&#39;&#34; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#            -o ./bin/layout_api \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#            ./cmd/api/main.go \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#        ;\</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#        go build -ldflags &#34;-s -w -X &#39;main.buildTime=`date`&#39; -X &#39;main.goVersion=`go version`&#39;&#34; \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#                -o ./bin/layout_task \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#                ./cmd/task/main.go \</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#        ;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 把编译好的执行文件，拷贝到运行容器中</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> harbor.dev.crycx.com:8000/library/alpine:base-3.12.2</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir -p configs<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#COPY --from=builder ./app/bin .</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./bin .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 配置</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./configs/config.toml ./configs/config.toml<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="deploysh">deploy.sh</h4>
<p>这里其实就是自由发挥写 docker-compose.yml， 其他部署方式都可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">IMAGE</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -eux<span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  docker pull <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IMAGE</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="nb">echo</span> <span class="s2">&#34;version: &#39;3&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">services:
</span></span></span><span class="line"><span class="cl"><span class="s2">  api:
</span></span></span><span class="line"><span class="cl"><span class="s2">     image: </span><span class="si">${</span><span class="nv">IMAGE</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">     ports:
</span></span></span><span class="line"><span class="cl"><span class="s2">      - &#39;18080:18080&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">     volumes:
</span></span></span><span class="line"><span class="cl"><span class="s2">      - &#39;./log/api:/app/log&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">     entrypoint:
</span></span></span><span class="line"><span class="cl"><span class="s2">      - /app/layout_api
</span></span></span><span class="line"><span class="cl"><span class="s2">     restart: always
</span></span></span><span class="line"><span class="cl"><span class="s2">  task:
</span></span></span><span class="line"><span class="cl"><span class="s2">    image: </span><span class="si">${</span><span class="nv">IMAGE</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    volumes:
</span></span></span><span class="line"><span class="cl"><span class="s2">      - &#39;./log/task:/app/log&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">    entrypoint:
</span></span></span><span class="line"><span class="cl"><span class="s2">      - /app/layout_task
</span></span></span><span class="line"><span class="cl"><span class="s2">    restart: always&#34;</span> &gt; docker-compose.yml<span class="p">;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>
</span></span><span class="line"><span class="cl">  docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="qa">QA</h2>
<ol>
<li>go mod download  下载私有包出现  'go mod revision xx: unknown revision xx'
<ol>
<li>因为 go mod 是去调用 git 命令下载代码，而且走的 https 协议，所以你要确保，git 配置能够访问你的私有仓库
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">user.name=gituser
</span></span><span class="line"><span class="cl">user.password=xxxxx
</span></span><span class="line"><span class="cl">credential.helper=store
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果还不行，尝试更新 git 版本到最新， 因为有些命令调取不去， golang 也会报这个错误</li>
</ol>
</li>
</ol>
<h2 id="总结">总结</h2>
<p>以上就是测试环境容器化的一个简要过程，因为Go天生编译简单的缘故，所以整体实施起来相对简单。对于类似Java，Node，Python这些项目，可能在选择运行容器的时候就很重要了。尽可能是选择官方的。比如 个语言的 slim 类型的镜像。alpine 镜像并不适用大多数语言。</p>
<p>在这过程中，使用的基本都是 Go 语言系列的工具，不得不说真的很好部署！</p>
<p>后续再踩到坑，再更新吧！</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E5%B7%A5%E5%85%B7/">工具</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E9%83%A8%E7%BD%B2/">部署</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/gitlab/">gitlab</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/ci/cd/">CI/CD</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/docker/">docker</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Shell 命令使用|异常整理</title>
                <link>https://www.bbdshow.top/posts/notes/shell/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/notes/shell/</guid>
                <pubDate>Thu, 05 Mar 2020 11:21:21 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>shell 使用过程记录，对于查询过的问题进行归集.</p>
<h2 id="使用知识">使用知识</h2>
<h3 id="if-----使用区别">if [ ] [[ ]] 使用区别</h3>
<h2 id="异常报错">异常报错</h2>
<h3 id="--unary-operator-expected">&quot;[: =: unary operator expected&quot;</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">arg</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="nv">$arg</span> !<span class="o">=</span> <span class="s2">&#34;&#34;</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$arg</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行报错 [: =: unary operator expected ， 因为如果 $arg 值不存在，则等式就成了 [  != &quot;&quot;] 这样就不符合规定。解决方案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">arg</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$arg</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;&#34;</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$arg</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="nv">$arg</span> !<span class="o">=</span> <span class="s2">&#34;&#34;</span> <span class="o">]]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$arg</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/shell/">Shell</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/shell/">shell</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo 引发SRI初识</title>
                <link>https://www.bbdshow.top/posts/other/sri/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/other/sri/</guid>
                <pubDate>Mon, 02 Mar 2020 15:56:22 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>最近迁移到Windows平台时，在使用 hugo 构建模板的过程中，使用 hugo server 后打开测试连接时，发现CSS加载不出来，并报错如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Failed to find a valid digest in the &#39;integrity&#39; attribute for resource &#39;xxx&#39;
</span></span><span class="line"><span class="cl">with computed SHA-256 integrity &#39;xxx&#39;. The resource has been blocked.
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过关键词 integrity 查询与 SRI (Subresource Integrity) 子资源完整性有关系。为什么hugo会引发呢？我的模板有个配置项是关闭SRI，我设置关闭后，hugo又报如下错误： <a href="https://gohugo.io/troubleshooting/faq/">hugo问题描述</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">error: failed to transform resource: TOCSS: failed to transform &#34;scss/main.scss&#34; (text/x-scss):
</span></span><span class="line"><span class="cl">this feature is not available in your current Hugo version
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以最后我去下载了hugo的 <a href="https://github.com/gohugoio/hugo/releases">extended</a> 扩展版本解决问题。</p>
<h2 id="sri-是什么能干什么注意点">SRI 是什么？能干什么？注意点？</h2>
<h3 id="是什么">是什么？</h3>
<p>是一项Web安全领域的保证<strong>子资源完整性</strong>的实施<a href="https://github.blog/2015-09-19-subresource-integrity/">方案</a>。目前支持的浏览器有 Chrome 45+ FireFox43+</p>
<h3 id="能干什么">能干什么？</h3>
<p>网站性能优化方案，常会把js、css等资源选择走CDN缓存，因为CDN服务商会在各地方部署节点，客户端访问时多数情况就在本地的地点获取到了资源，减少了路由跳转等。这样可以大幅度提升页面响应速度。这时我们的资源获取经过了第三方服务器，但是怎么保证自己部署的文件未被篡改呢？</p>
<p>对文件进行内容进行签名，浏览器加载的时候去验证签名。签名一致再加载内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha256-+Ec97OckLaaiDVIxNjSIGzl1xSzrqh5sOBV8DcccpE=&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll/dist/smooth-scroll.polyfills.min.js&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>integrity 标签属性就是我们的签名信息，对 src 的资源进行 sha256 签名后得到计算结果。</p>
<h3 id="注意点">注意点</h3>
<ol>
<li>但是开启了SRI后，浏览器会对资源进行<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">CORS校验</a>, 注意同域或者设置 Access-Control-Allow-Origin 响应头。</li>
<li>如果我们网页与CDN都未使用HTTPS，那么运营商可以截取整个HTML页面本身，那么他就可以修改 integrity 这个标签属性，所以此时SRI就失效了。</li>
<li>如果文件被篡改，此时就会整个文件无法执行，从而使页面不可用。为了预防此情况，可以在加载资源的时候发现CDN资源不可用时，直接回源请求。</li>
</ol>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E5%85%B6%E4%BB%96/">其他</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/sri/">sri</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/integrity/">integrity</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Gin - RouterGroup 路由实现机制</title>
                <link>https://www.bbdshow.top/posts/frame/gin/routergroup/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/frame/gin/routergroup/</guid>
                <pubDate>Mon, 20 Jan 2020 15:29:23 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<blockquote>
<p>凿不休则沟深，斧不止则薪多。——王充</p>
</blockquote>
<p>路由实现，是Gin框架的核心，REST风格注册路由，RadixTree（<a href="%5Bhttps://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%A0%91/22853708%5D(https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%A0%91/22853708)">基数树</a>）路由匹配实现，也让寻址更加快。实现了http.Server.Handler接口。合理设计使注册中间件变得非常快捷优雅。解耦巧妙，寻址高效。接下来我们就一点点剖析。</p>
<h2 id="enginetrees">Engine.trees</h2>
<p>Engine 结构关于路由的有两个比较重要的构成，一个是Engine.RouterGroup结构体，一个就是存储路径的基数树结构。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">methodTrees</span> <span class="p">[]</span><span class="nx">methodTree</span>	
</span></span><span class="line"><span class="cl"><span class="c1">// 每个请求方法后面对应一颗树(基树)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">trees</span>            <span class="nx">methodTrees</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">static</span>   <span class="nx">nodeType</span> <span class="p">=</span> <span class="kc">iota</span> <span class="c1">// 普通节点 default
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">root</span>                     <span class="c1">// 根节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">param</span>                    <span class="c1">// 参数路由 /test/:name/:talk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">catchAll</span>                 <span class="c1">// 通配符类型 /abc/*key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">methodTree</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">method</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">root</span>   <span class="o">*</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">node</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">path</span>      <span class="kt">string</span> <span class="c1">// 当前节点相对路径（与祖先节点的 path 拼接可得到完整路径）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">indices</span>   <span class="kt">string</span> <span class="c1">// 所以孩子节点的path[0]组成的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">children</span>  <span class="p">[]</span><span class="o">*</span><span class="nx">node</span> <span class="c1">// 子节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">handlers</span>  <span class="nx">HandlersChain</span> <span class="c1">// 当前节点处理函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">priority</span>  <span class="kt">uint32</span> <span class="c1">// 当前节点及子孙节点的实际路由数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nType</span>     <span class="nx">nodeType</span> <span class="c1">// 节点类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">maxParams</span> <span class="kt">uint8</span> <span class="c1">// 子孙节点的最大参数数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">wildChild</span> <span class="kt">bool</span> <span class="c1">// 子节点是否有通配符（&#39;:&#39; &#39;*&#39;）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fullPath</span>  <span class="kt">string</span> <span class="c1">// 当前节点全路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>trees 其实是由多棵树组成，每种HTTP Method对应一棵树。我们重点看一下这个组成基数树节点由哪些元素。</p>
<p>UML图</p>
<p><img src="http://q48vqd7m4.bkt.clouddn.com/img/20200120140814.png" alt=""></p>
<p>我们以3个路由为示例展现最终生成的树形结构，同一请求Method，同一棵树下。</p>
<p><img src="http://q48vqd7m4.bkt.clouddn.com/img/20200120141837.png" alt=""></p>
<p>这里只是举例简单的路由方式，注意path、 indices 与 wildChild。相同的路径不存储，节省空间，时间复杂度也只有O(<em>k</em>)复杂度，其中k是所有字符串中最大的长度。</p>
<p>RadixTree 实现方法在Gin项目根目录下 tree.go 文件。</p>
<h2 id="engineroutergroup">Engine.RouterGroup</h2>
<p>RouterGroup 是Gin对路由的操作管理，通过单独的 strcut 实现与Engine进行分开，然后容Engine继承RouterGroup这样，Engine 就得到了RouterGroup 所实现的所有功能，这样有利于代码的逻辑分离。而且Gin还定义了 IRoutes 接口，以展示和校验 RouterGroup 实现方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RouterGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Handlers</span> <span class="nx">HandlersChain</span> <span class="c1">// 注册到此路由分组下的所有公共处理方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">basePath</span> <span class="kt">string</span> <span class="c1">// 基础路径，例如 /health
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span>   <span class="o">*</span><span class="nx">Engine</span> <span class="c1">// engine 结构，多用于操作里面的 methodTrees，addRoute
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">root</span>     <span class="kt">bool</span> <span class="c1">// if true 根路径，basePath=/
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">IRoutes</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 直接注册HandlerFunc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Use</span><span class="p">(</span><span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 以下不同方法注册HandlerFunc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Handle</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Any</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GET</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">POST</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">DELETE</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PATCH</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PUT</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">OPTIONS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">HEAD</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 文件系统
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">StaticFile</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Static</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">StaticFS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileSystem</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册handle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="nx">HandlersChain</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算合规的绝对路径，如果有 basePath 则 basePath + relativePath
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">absolutePath</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">calculateAbsolutePath</span><span class="p">(</span><span class="nx">relativePath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 向后追加处理方法，但是总handles长度不能超过 63 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">handlers</span> <span class="p">=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在 methodTrees 注册此路由，handlers = group.Handlers + handlers 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">group</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nf">addRoute</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">absolutePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">returnObj</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样做的好处是什么？我们举几个例子说明：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里 engine.GET 继承了 RouterGroup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/health&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span> <span class="nx">c</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&#34;ok&#34;</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果我们有一组路由, 还是使用的 RouterGroup 暴露的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 为这个分组添加一个中间件, 等同于 v1.Use(...)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">v1</span> <span class="o">:=</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/v1&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">v1</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/create&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;create post router&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">Status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 进行分组隔离
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">v2</span> <span class="o">:=</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/v2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">auth</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">user</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">GetHeader</span><span class="p">(</span><span class="s">&#34;user&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">user</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span> <span class="c1">// 中断后续handler执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="c1">// 下一个handler执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 添加一个 auth 验证的中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">v2</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/:name&#34;</span><span class="p">,</span> <span class="nf">auth</span><span class="p">(),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Param</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="p">=</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到通过Group我们可以与Engine进行解耦，而且Group暴露出来的 RouterGroup，针对不同的RouterGroup 我们还可以进行自定义的处理方法（中间件）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Group creates a new router group. You should add all the routes that have common middlewares or the same path prefix.
</span></span></span><span class="line"><span class="cl"><span class="c1">// For example, all the routes that use a common middleware for authorization could be grouped.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">Group</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="o">*</span><span class="nx">RouterGroup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">RouterGroup</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handlers</span><span class="p">:</span> <span class="nx">group</span><span class="p">.</span><span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">basePath</span><span class="p">:</span> <span class="nx">group</span><span class="p">.</span><span class="nf">calculateAbsolutePath</span><span class="p">(</span><span class="nx">relativePath</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">engine</span><span class="p">:</span>   <span class="nx">group</span><span class="p">.</span><span class="nx">engine</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ServeHTTP conforms to the http.Handler interface.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">engine</span> <span class="o">*</span><span class="nx">Engine</span><span class="p">)</span> <span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 临时对象池，减少开销
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">engine</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nf">Get</span><span class="p">().(</span><span class="o">*</span><span class="nx">Context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">writermem</span><span class="p">.</span><span class="nf">reset</span><span class="p">(</span><span class="nx">w</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Request</span> <span class="p">=</span> <span class="nx">req</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 路由匹配，并处理 handlers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">handleHTTPRequest</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="中间件-handlerfunc">中间件 ...HandlerFunc</h2>
<p>上述示例，我们给出了如果注册中间件的多种方式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span> <span class="nx">HandlersChain</span><span class="p">)</span> <span class="nx">HandlersChain</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">finalSize</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">Handlers</span><span class="p">)</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">finalSize</span> <span class="o">&gt;=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">abortIndex</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="s">&#34;too many handlers&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mergedHandlers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">HandlersChain</span><span class="p">,</span> <span class="nx">finalSize</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">copy</span><span class="p">(</span><span class="nx">mergedHandlers</span><span class="p">,</span> <span class="nx">group</span><span class="p">.</span><span class="nx">Handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">copy</span><span class="p">(</span><span class="nx">mergedHandlers</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">Handlers</span><span class="p">):],</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">mergedHandlers</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以上段代码，是 handle 时调用，可以看到 RouterGroup.Handlers 始终是在指定路径的处理handlers 前面，RouterGroup.Handlers 这里一般是此路由组公共中间件(group.Use()) 。而具体的REST API则可以看到 auth() 就特指 /v2/:name 路径的中间件。</p>
<h2 id="结语">结语</h2>
<p>以上就是Gin的路由注册及路由查询匹配的大致运行路径及实现逻辑。很精致，代码也不多，编码设计直接思考和借鉴。关键是让使用非常方便，结构清晰一目了然，设计巧妙，利于扩展。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E6%A1%86%E6%9E%B6/">框架</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/gin/">Gin</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/golang/">golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/gin/">gin</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Gin - HTTP Server 注册分析</title>
                <link>https://www.bbdshow.top/posts/frame/gin/httpserver/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/frame/gin/httpserver/</guid>
                <pubDate>Sun, 19 Jan 2020 11:51:23 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<blockquote>
<p>地转天旋，万事开头难，斗霜傲雪二十年，堂堂剑气尚寒。</p>
</blockquote>
<p>Gin 的优秀不止是性能上的凸显，也能在很多小细节上展现。下面我们就看看，WEB服务最基础的服务监听注册是怎么编写及实现的。</p>
<h2 id="http服务注册">HTTP服务注册</h2>
<p>来看看最简单的代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 最简单的HTTP服务监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/health&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span> <span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&#34;ok&#34;</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对，没看错！只有三行，就能启动http服务本地监听8080端口，并启动一个健康检查。</p>
<p>接下来我们就一步步看这三行代码，后面究竟做了些什么？</p>
<h3 id="gindefault">gin.Default()</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Default</span><span class="p">()</span> <span class="o">*</span><span class="nx">Engine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 监测当前运行环境(go version)，给出建议及提醒, 仅 gin debug 环境下输出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">debugPrintWARNINGDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化Engine结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span> <span class="o">:=</span> <span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用一个日志中间件，recovery()在单个goroutine捕获接下来处理的异常，防止主进程异常退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nf">Logger</span><span class="p">(),</span> <span class="nf">Recovery</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">engine</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里最重要的就是 New() 函数。背后就是 Engine结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Engine</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 路由分组结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">RouterGroup</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 当路由不匹配，是否自动重定向请求 /foo/ 301  /foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">RedirectTrailingSlash</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 当路由不匹配尝试自动修复路由在匹配，例如 /FOO and /..//Foo 更正到 /foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">RedirectFixedPath</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 开启，如果未匹配则返回 405不被允许，否则返回 404
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">HandleMethodNotAllowed</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 用于获取client真是ip，例如头 X-Forwarded-For X-Appengine-Remote-Addr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ForwardedByClientIP</span>    <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// #726 #755 If enabled, it will thrust some headers starting with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// &#39;X-AppEngine...&#39; for better integration with that PaaS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">AppEngine</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true url.RawPath 会被用来查找参数 默认false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">UseRawPath</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果true， path value 会被保留
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 如果 UseRawPath是false(默认)，UnescapePathValues为true  url.Path会被保留并使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">UnescapePathValues</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Value of &#39;maxMemory&#39; param that is given to http.Request&#39;s ParseMultipartForm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// method call.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">MaxMultipartMemory</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">delims</span>           <span class="nx">render</span><span class="p">.</span><span class="nx">Delims</span>
</span></span><span class="line"><span class="cl">	<span class="nx">secureJsonPrefix</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">HTMLRender</span>       <span class="nx">render</span><span class="p">.</span><span class="nx">HTMLRender</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FuncMap</span>          <span class="nx">template</span><span class="p">.</span><span class="nx">FuncMap</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 注册方法处理链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">allNoRoute</span>       <span class="nx">HandlersChain</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allNoMethod</span>      <span class="nx">HandlersChain</span>
</span></span><span class="line"><span class="cl">	<span class="nx">noRoute</span>          <span class="nx">HandlersChain</span>
</span></span><span class="line"><span class="cl">	<span class="nx">noMethod</span>         <span class="nx">HandlersChain</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pool</span>             <span class="nx">sync</span><span class="p">.</span><span class="nx">Pool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 每个请求方法后面对应一颗树(基树)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">trees</span>            <span class="nx">methodTrees</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 可以看到对 Engine 的默认值进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">()</span> <span class="o">*</span><span class="nx">Engine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">debugPrintWARNINGNew</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Engine</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RouterGroup</span><span class="p">:</span> <span class="nx">RouterGroup</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Handlers</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">basePath</span><span class="p">:</span> <span class="s">&#34;/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">root</span><span class="p">:</span>     <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">FuncMap</span><span class="p">:</span>                <span class="nx">template</span><span class="p">.</span><span class="nx">FuncMap</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RedirectTrailingSlash</span><span class="p">:</span>  <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RedirectFixedPath</span><span class="p">:</span>      <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">HandleMethodNotAllowed</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ForwardedByClientIP</span><span class="p">:</span>    <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AppEngine</span><span class="p">:</span>              <span class="nx">defaultAppEngine</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UseRawPath</span><span class="p">:</span>             <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UnescapePathValues</span><span class="p">:</span>     <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxMultipartMemory</span><span class="p">:</span>     <span class="nx">defaultMultipartMemory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">trees</span><span class="p">:</span>                  <span class="nb">make</span><span class="p">(</span><span class="nx">methodTrees</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delims</span><span class="p">:</span>                 <span class="nx">render</span><span class="p">.</span><span class="nx">Delims</span><span class="p">{</span><span class="nx">Left</span><span class="p">:</span> <span class="s">&#34;{{&#34;</span><span class="p">,</span> <span class="nx">Right</span><span class="p">:</span> <span class="s">&#34;}}&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">secureJsonPrefix</span><span class="p">:</span>       <span class="s">&#34;while(1);&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span><span class="p">.</span><span class="nx">RouterGroup</span><span class="p">.</span><span class="nx">engine</span> <span class="p">=</span> <span class="nx">engine</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// context pool 减少context重新申请带来的开销
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nx">New</span> <span class="p">=</span> <span class="kd">func</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">allocateContext</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">engine</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述对结构体每个元素进行了翻译， 其中重要的就要数 RouterGroup，Context，各类 handlers  及 methodTrees 后面做详细解释。</p>
<h2 id="engineget">engine.GET()</h2>
<p>这里就涉及到了路由注册，GET 注册方法，/health 注册路径，后续就是处理方法，具体实现在RouterGroup结构体中，来初步了解一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// GET is a shortcut for router.Handle(&#34;GET&#34;, path, handle).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">GET</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="nx">HandlersChain</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算合规的绝对路径，如果有 basePath 则 basePath + relativePath
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">absolutePath</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">calculateAbsolutePath</span><span class="p">(</span><span class="nx">relativePath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 向后追加处理方法，但是总handles长度不能超过 63
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">handlers</span> <span class="p">=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在 methodTrees 此方法，此路由下，重置 handlers。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">group</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nf">addRoute</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">absolutePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">returnObj</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// RouterGroup is used internally to configure router, a RouterGroup is associated with
</span></span></span><span class="line"><span class="cl"><span class="c1">// a prefix and an array of handlers (middleware).
</span></span></span><span class="line"><span class="cl"><span class="c1">// 路由匹配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">RouterGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 注册到此路由下的所有处理方法， []HandlerFunc （type HandlerFunc func(*Context)）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Handlers</span> <span class="nx">HandlersChain</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 基础路径，例如 /system 分组路径前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">basePath</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// engine 结构，多用于操作里面的 methodTrees， 或取其他 Handlers (noRoute...)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span>   <span class="o">*</span><span class="nx">Engine</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// true ， 根路径， basePath=/
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">root</span>     <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>以上逻辑，就把路由注册好了。则还剩最后一步。</p>
<h2 id="enginerun">engine.Run()</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">engine</span> <span class="o">*</span><span class="nx">Engine</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">addr</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 打印错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nf">debugPrintError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果不传入地址，默认有一个监听端口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">address</span> <span class="o">:=</span> <span class="nf">resolveAddress</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">debugPrint</span><span class="p">(</span><span class="s">&#34;Listening and serving HTTP on %s\n&#34;</span><span class="p">,</span> <span class="nx">address</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 其实就是包装的 http 包快速 TCP网络上 addr 地址的监听，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// engine 是实现了  type Handler interface { ServeHTTP(ResponseWriter, *Request) }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="nx">engine</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>很简单，其实就是对，http.ListenAndServe() 进行了包装，传入了自己的 Handler, 也就是Engine。之所以这么简单，是因为Golang在http包上面已经为我们封装的很完善了。</p>
<h2 id="上述不足之处">上述不足之处</h2>
<p>虽然我们可以看到三行代码就能启动http服务，但是上述这种方式还是有诸多不足之处。比如：</p>
<ol>
<li>未设置Gin框架运行模式，存在debug调试输出等。</li>
<li>未设置http.Server 中的参数，比如重要的读写超时时间设置。</li>
<li>启动和退出对于生产项目中不太优雅。</li>
</ol>
<h2 id="个人常用实践">个人常用实践</h2>
<p>启动时根据运行环境进行Server定制，正常退出或者涉及到信号量的处理，最后把申请的资源释放。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os/signal&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;syscall&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">engine</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;RUN_ENV&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#34;release&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gin</span><span class="p">.</span><span class="nf">SetMode</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nx">ReleaseMode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 注册一个全局recovery 防止因某个goroutine异常,导致主进程退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 可采用自己的日志输出实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// SkipPaths []string 可添加，用于过滤health检查等Path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nf">Recovery</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 可路由分组，后期介绍
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/health&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span> <span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&#34;ok&#34;</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>         <span class="s">&#34;:8080&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handler</span><span class="p">:</span>      <span class="nx">engine</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ReadTimeout</span><span class="p">:</span>  <span class="mi">120</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">WriteTimeout</span><span class="p">:</span> <span class="mi">120</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ErrorLog</span><span class="p">:</span>     <span class="kc">nil</span><span class="p">,</span> <span class="c1">// 可选日志
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里用 goroutine 包一下，当监听异常也可以不影响主进程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 信号量, 用它柱塞主进程，对不同信号做出反应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">signalAccept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果退出，在释放一些之前申请的资源，例如 db等。 db.Close()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;程序退出&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">signalAccept</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 不同的信号量不同的处理方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGHUP</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGQUIT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">si</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">si</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGQUIT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 退出程序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGHUP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 程序不退出，但是可以执行一些reload操作， 比如reload config等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 可选择实现，退出程序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="结语">结语</h2>
<p>因为Golang语言http包已经封装了很多，不用框架，也可以几行代码实现HTTP服务，Gin在这一块的包装只是更加实用方便了，提供了很多快捷方法，替换了http包中一些组件原本实现，比如路由匹配，Context等等。这章节讲解的内容并不多，只是给出了个人常用实践。后期将在记录Gin框架其他细节实现。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E6%A1%86%E6%9E%B6/">框架</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/gin/">Gin</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/golang/">golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/gin/">gin</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Prometheus 工具搭建记录</title>
                <link>https://www.bbdshow.top/posts/tools/prometheus-deploy/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/tools/prometheus-deploy/</guid>
                <pubDate>Tue, 17 Sep 2019 16:09:40 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>Prometheus 监控简单搭建思路，满足监控目标服务自发现。采用到 prometheus，grafana，confd，etcd工具搭配使用。</p>
<p>Prometheus负责把metrics数据从监控服务端抓取到本地或远端存储，Grafana通过连接Prometheus数据源，通过PromQL查询所抓取到的监控数据绘制成精美实用的报表，Grafana支持报表模版一键导入极为方便。Confd配合ETCD自动添加/更新监测任务，当服务存在N多地址时，给维护带来极大的方便。</p>
<p><strong>这里不对某一组件做详细介绍。</strong></p>
<h2 id="prometheus">Prometheus</h2>
<h3 id="搭建架构图">搭建架构图</h3>
<h3 id="本文采取的部署方式及配置">本文采取的部署方式及配置</h3>
<p>本文介绍最常用的使用模式，即使用Pull目标服务的方式。通过配置不同的job和targets，实现不同的项目监控。对比Push系列(存在agent)的监控平台，在部署上有更大的优势。数据存储到本地(存在单点，可扩展/耐用性的不足，所以提供HTTP接口支持远端时序数据库)，如果数据要保证不可丢，那建议采用远端存储的方式。对于需要大数据量的查询语句，也建议迁移到远端(此处不讨论)。 <a href="https://prometheus.io/docs/prometheus/latest/storage/">存储设置参考</a></p>
<p>部署的方式主体分两种：单点部署简单方便，能够成熟较大的监控规模，缺点也显而易见，单点架构存在的毛病，他都有，哈哈，但是本身prometheus自己已经做到自治性，而且本身可靠性很强，对付一千以内的监控节点应该还是可行的。<a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/scale-prometheus-with-federation">联邦集群部署</a>(高可用，大规模监控，分区分组等)</p>
<h3 id="prometheus配置简介">Prometheus配置简介</h3>
<p>某种场景，常用<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">配置</a>介绍</p>
<ol>
<li>
<p>运行时Reload配置</p>
<ul>
<li>给进程发送信号量 SIGHUP</li>
<li>启动时开启 --web.enable-lifecycle  支持HTTP POST http://localhost:9090/-/reload</li>
</ul>
</li>
<li>
<p>指定启动配置文件(default:  /etc/prometheus/prometheus.yml)</p>
<ul>
<li>--config.file=/etc/prometheus/prometheus.yml    yaml文件，注意占位符的有效性</li>
</ul>
</li>
<li>
<p>本地存储路径</p>
<ul>
<li>--storage.tsdb.path=/prometheus</li>
</ul>
</li>
<li>
<p>开启API访问</p>
<ul>
<li>--web.enable-admin-api</li>
</ul>
</li>
<li>
<p>prometheus自己提供可视化模版，但是相对没有grafana好用，所以下面配置可以不配置</p>
<ul>
<li>--web.console.libraries=/usr/share/prometheus/console_libraries</li>
<li>--web.console.templates=/usr/share/prometheus/consoles</li>
</ul>
</li>
</ol>
<p>优选Docker容器部署，好处不用说，只要数据文件不被破坏，加上restart=always，基本可以保证服务不中断。附上 docker-compose.yml (macOS) 文件可根据下述文件适当修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">prom/prometheus:v2.10.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">9090</span><span class="p">:</span><span class="m">9090</span><span class="l">/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/data/prometheus:/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 这里配置文件，尽量挂载目录，因为在confd修改文件时，可以已经修改了文件的 inode 信息，导致文件不同步</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/config/prometheus:/etc/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/bin/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- --<span class="l">config.file=/etc/prometheus/prometheus.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- --<span class="l">storage.tsdb.path=/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- --<span class="l">web.enable-admin-api</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- --<span class="l">web.enable-lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="grafana">Grafana</h2>
<p>一款优秀的渲染平台，<a href="https://grafana.com/docs/">Grafana官方文档</a></p>
<p>主要是用来渲染prometheus的数据，当然grafana本身支持N多数据源。主要是它有图表仓库，对于标准的监控输出，比如node_exporter，直接可以找到别人已经配置好的模版，在线import(自己的模版也可以export)，非常方便！</p>
<p>依然docker部署，注意user不同平台处理的权限可能不同。附上 docker-compose.yml (macOS) 文件可根据下述文件适当修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">grafana</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">grafana/grafana:6.2.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/data/grafana:/var/lib/grafana</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/config/grafana/grafana.ini:/etc/grafana/grafana.ini</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3000</span><span class="p">:</span><span class="m">3000</span><span class="l">/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span><span class="l">grafana</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>至此以上两个容器就能够基本跑出demo版本的监控系统了。但是对于可维护性还有一些欠缺，所以接下来使用 confd+etcd做prometheus的服务发现，当然prometheus本身支持很多种SD方式。<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">服务发现</a>，但对于etcd的使用因为没有标准，所以prometheus本身不提供支持。</p>
</blockquote>
<h2 id="confd">Confd</h2>
<p>confd 轻量级配置管理工具，支持go template模版语法。保持本地配置最新，同时具备定期探测机制，配置变更自动reload。其后端支持的数据类型有：etcd、consul、vault、environment variables、redis、zookeeper、dynamodb、stackengine、rancher。不过一般使用Confd和etcd的配合使用比较多。</p>
<h3 id="配置-针对于etcd">配置-针对于etcd</h3>
<ul>
<li>-onetime 执行一次就退出，相当于请求一下etcd解析成对应的模版。</li>
<li>-backend=etcdv3  默认是 etcd v2 版本</li>
<li>-node=http://127.0.0.1:2379  // etcd 连接地址</li>
<li>-watch 开启watch功能，etcd变更自动变更配置文件。</li>
</ul>
<p>还有一些关于密码连接的问题，demo环境暂时未测试。</p>
<p>此服务不建容器部署，因为文件映射，reload命令执行等都可能产生不便。对此容器需要别较高的定制，如果出现nginx reload 类似的情况，还是物理机部署来的可靠方便。但是也可以容器部署，部署的方式及思路，(本地启动在此包括了) 如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> golang:1.10.2-alpine as builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">CONFD_VERSION</span><span class="o">=</span><span class="m">0</span>.16.0<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ADD</span> https://github.com/kelseyhightower/confd/archive/v<span class="si">${</span><span class="nv">CONFD_VERSION</span><span class="si">}</span>.tar.gz /tmp/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apk add --no-cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bzip2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    make <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  mkdir -p /go/src/github.com/kelseyhightower/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="nb">cd</span> /go/src/github.com/kelseyhightower/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  tar --strip-components<span class="o">=</span><span class="m">1</span> -zxf /tmp/v<span class="si">${</span><span class="nv">CONFD_VERSION</span><span class="si">}</span>.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  go install github.com/kelseyhightower/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  rm -rf /tmp/v<span class="si">${</span><span class="nv">CONFD_VERSION</span><span class="si">}</span>.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> alpine:3.7</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /go/bin/confd /bin/confd<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apk add --no-cache curl<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chmod +x /bin/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mkdir -p /etc/confd/<span class="o">{</span>conf.d,templates<span class="o">}</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;confd&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>mkdir -p /etc/confd/{conf.d,templates} 是放 confd 默认配置和模版文件的位置，可以根据不同的容器提前把配置和模版构建到镜像内</li>
<li>配置文件需要执行的 cmd ，要在容器内安装好</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">confd</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">confd:0.16.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 在物理机上面管理配置及模版文件  </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/data/templates:/etc/confd/templates</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/data/conf.d:/etc/confd/conf.d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 把目标文件写入到指定位置，容器文件变更影响宿主机。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 例如prometheus的配置文件，就要映射到主机~/.confd/server/prometheus.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.confd/server:/server/conf.d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 也可以调用配置sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/bin/confd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- -<span class="l">backend=etcdv3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- -<span class="l">node=http://192.168.2.96:2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- -<span class="l">watch</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>PS: <strong>prometheus.conf.toml  放到volumes映射的conf.d文件夹内</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">template</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">prefix</span> <span class="p">=</span> <span class="s2">&#34;/prometheus&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">src</span> <span class="p">=</span> <span class="s2">&#34;prometheus.conf.tmpl&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dest</span> <span class="p">=</span> <span class="s2">&#34;/server/conf.d/prometheus.yml&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">mode</span> <span class="p">=</span> <span class="s2">&#34;0644&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">keys</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;/job&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">reload_cmd</span> <span class="p">=</span> <span class="s2">&#34;curl -X POST http://192.168.2.96:9090/-/reload&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解释：</p>
<ol>
<li>prefix = etcd key 的前缀</li>
<li>src = 加载的模版文件名称，这里是采用默认目录</li>
<li>dest = 模版文件通过解析后，生成的文件及地址</li>
<li>keys = 二级目录拆分，为后面的模版语法服务</li>
<li>reload_cmd = 当发现配置文件变更后，执行的cmd，请求prometheus热加载配置的接口</li>
</ol>
<p>PS: <strong>prometheus.conf.tmpl 放到volumes映射的templates文件夹内</strong></p>
<pre tabindex="0"><code class="language-templates" data-lang="templates">global:
  scrape_interval: 15s
scrape_configs:
  - job_name: &#39;prometheus&#39;
    scrape_interval: 5s
    static_configs:
      - targets: [&#39;localhost:9090&#39;]
{{range $label := ls &#34;/job&#34; }}
  - job_name: &#39;{{base $label}}&#39;
    scrape_interval: 5s
    static_configs:
{{$job_name := printf &#34;/job/%s/*&#34; $label}}{{range gets $job_name}}
      - targets: [{{.Value}}]
        labels:
             instance: &#39;{{base .Key}}&#39;
{{end}}
{{end}}
</code></pre><p>解释：</p>
<ol>
<li>提供一些内置函数，满足go template的<a href="https://golang.org/pkg/text/template/">模版语法</a>，如果为了满足自己的业务需求，尽可能先学习一下模板语法，结合etcd的kv结构构建数据，配置好就一劳永逸。</li>
</ol>
<h2 id="添加执行任务示例">添加执行任务示例</h2>
<p>jobx 任务  subJobx 子任务模块</p>
<blockquote>
<p>ETCDCTL_API=3 etcdctl put /prometheus/job/jobx/subJobx '127.0.0.1:10010'</p>
</blockquote>
<p>查看prometheus容器映射的配置文件</p>
<blockquote>
<p>cat ~/.confd/server/prometheus.yml</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">global:
</span></span><span class="line"><span class="cl">  scrape_interval: 15s
</span></span><span class="line"><span class="cl">scrape_configs:
</span></span><span class="line"><span class="cl">  - job_name: &#39;prometheus&#39;
</span></span><span class="line"><span class="cl">    scrape_interval: 5s
</span></span><span class="line"><span class="cl">    static_configs:
</span></span><span class="line"><span class="cl">      - targets: [&#39;localhost:9090&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  - job_name: &#39;jobx&#39;
</span></span><span class="line"><span class="cl">    scrape_interval: 5s
</span></span><span class="line"><span class="cl">    static_configs:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - targets: [&#39;127.0.0.1:10010&#39; ]
</span></span><span class="line"><span class="cl">        labels:
</span></span><span class="line"><span class="cl">             instance: &#39;subJobx&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><p>在jobx任务下，添加第二个子任务</p>
<blockquote>
<p>ETCDCTL_API=3 etcdctl put /prometheus/job/jobx/subJobx1 '127.0.0.2:10010'</p>
</blockquote>
<p>此时可以去看prometheus后台<a href="http://localhost:9090/targets">http://localhost:9090/targets</a>看任务是否添加成功。如果要删除任务，直接删除key就可以了</p>
<h2 id="etcd">ETCD</h2>
<p>ETCD用处不用多说，主要是搭建简单，使用简单，协议理解简单。提供HTTPAPI(v2),gRPC watch(v3)。存储(bblot)高性能，又支持多版本。爽歪歪！搭建起来就完事了。可集群可单点，此文Docker单点</p>
<p>因为ETCD只是作为demo搭建，所以没有什么特别的参数，线上环境是需要根据机器配置，存储介质和网络环境等，调整一定的参数。附上 docker-compose.yml (macOS) 文件可根据下述文件适当修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">etcd</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">quay.io/coreos/etcd:v3.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">${PWD}/data:/default.etcd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#network_mode: &#39;host&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">2379</span><span class="p">:</span><span class="m">2379</span><span class="l">/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/usr/local/bin/etcd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- --<span class="l">listen-client-urls=http://0.0.0.0:2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- --<span class="l">advertise-client-urls=http://0.0.0.0:2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>整套监控涉及到4个模块，上述过程只是记录了一个最基本的搭建过程及每个模块在监控系统中承担的角色。当我们深度使用的时候一定还有很多坑要踩。此处还未研究prometheus的报警模块。每一个模块都是值得深入研究。后续也会记录更深的用法及踩坑的经验。</p>
<p>最后推荐一下写的一个小中间件<a href="https://github.com/bbdshow/ginprom/tree/master">ginprom</a>http exporter。如果项目在gin路由框架下，监控API访问量，耗时，流量，服务资源消耗等，可以快速接入prometheus的监控。</p>
<h2 id="参考连接">参考连接</h2>
<ol>
<li><a href="https://prometheus.io/docs/introduction/overview/">官方文档</a></li>
<li><a href="https://www.cnblogs.com/vovlie/p/7709312.html?utm_source=debugrun&amp;utm_medium=referral">剖析Prometheus的内部存储机制</a></li>
<li><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart">Prometheus-book</a></li>
</ol>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E5%B7%A5%E5%85%B7/">工具</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E9%83%A8%E7%BD%B2/">部署</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/">监控工具</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/prometheus/">prometheus</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Mongodb 日志切割shell</title>
                <link>https://www.bbdshow.top/posts/notes/mongodb-log-cutting/</link>
                <guid isPermaLink="true">https://www.bbdshow.top/posts/notes/mongodb-log-cutting/</guid>
                <pubDate>Thu, 27 Jun 2019 13:11:39 +0800</pubDate>
                
                    <author>https://github.com/bbdshow (bbdshow)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>mongodb 运行日志，如果长期不进行滚动切割，会导致单日志文件过大，影响日志的写入与读取。所以可以通过给mongodb进程发送信号，让主进程自动切割日志
此脚本的功能是：定时切割日志，并保存X天数的日志量。</p>
<p>请适当的修改内部参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># crond cutting mongodb.log </span>
</span></span><span class="line"><span class="cl"><span class="nv">pidPath</span><span class="o">=</span>/data/mongodb/db/mongod.lock
</span></span><span class="line"><span class="cl"><span class="nv">logPath</span><span class="o">=</span>/data/mongodb/log/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">PATH</span><span class="o">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
</span></span><span class="line"><span class="cl"><span class="nb">export</span> PATH
</span></span><span class="line"><span class="cl"><span class="nb">kill</span> -SIGUSR1 <span class="k">$(</span>cat <span class="si">${</span><span class="nv">pidPath</span><span class="si">}</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">find <span class="s2">&#34;</span><span class="si">${</span><span class="nv">logPath</span><span class="si">}</span><span class="s2">&#34;</span> -mtime +7 -name <span class="s2">&#34;mongod.log*&#34;</span> -exec rm -rf <span class="o">{}</span> <span class="se">\;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/categories/shell/">Shell</category>
                                
                            
                        
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/shell/">shell</category>
                                
                            
                                
                                
                                
                                    <category domain="https://www.bbdshow.top/tags/mongodb/">mongodb</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>