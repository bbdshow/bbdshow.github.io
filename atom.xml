<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Sharing the life of words</title>
    <subtitle type="html">生活笔记</subtitle>
    <updated>2020-01-19T11:56:00+08:00</updated>
    <id>https://www.huzhongqing.com/</id>
    <link rel="alternate" type="text/html" href="https://www.huzhongqing.com/" />
    <link rel="self" type="application/atom+xml" href="https://www.huzhongqing.com/atom.xml" />
    <author>
            <name>huzhongqing</name>
            <uri>https://www.huzhongqing.com/</uri>
            
                <email>zhongqing2016@qq.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.62.2">Hugo</generator>
        <entry>
            <title type="text">Gin HTTP Server 注册分析</title>
            <link rel="alternate" type="text/html" href="https://www.huzhongqing.com/posts/gin/httpserver/" />
            <id>https://www.huzhongqing.com/posts/gin/httpserver/</id>
            <updated>2020-01-19T11:55:51+08:00</updated>
            <published>2020-01-19T11:51:23+08:00</published>
            <author>
                    <name>huzhongqing</name>
                    <uri>https://www.huzhongqing.com/</uri>
                    <email>zhongqing2016@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[地转天旋，万事开头难，斗霜傲雪二十年，堂堂剑气尚寒。 Gin 的优秀不止是性能上的凸显，也能在很多小细节上展现。下面我们就看看，WEB服务最基础的服务监听注册是怎么编写及实现的。 HTTP服务注册 来看看最简单的……]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>地转天旋，万事开头难，斗霜傲雪二十年，堂堂剑气尚寒。</p>
</blockquote>
<p>Gin 的优秀不止是性能上的凸显，也能在很多小细节上展现。下面我们就看看，WEB服务最基础的服务监听注册是怎么编写及实现的。</p>
<h2 id="http服务注册">HTTP服务注册</h2>
<p>来看看最简单的代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;github.com/gin-gonic/gin&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// 最简单的HTTP服务监听
</span><span class="c1"></span>	<span class="nx">engine</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="p">)</span>
	<span class="nx">engine</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/health&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span> <span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&#34;ok&#34;</span><span class="p">)</span> <span class="p">}</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">)</span><span class="p">;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>对，没看错！只有三行，就能启动http服务本地监听8080端口，并启动一个健康检查。</p>
<p>接下来我们就一步步看这三行代码，后面究竟做了些什么？</p>
<h3 id="gindefault">gin.Default()</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Default</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span><span class="nx">Engine</span> <span class="p">{</span>
	<span class="c1">// 监测当前运行环境(go version)，给出建议及提醒, 仅 gin debug 环境下输出
</span><span class="c1"></span>	<span class="nf">debugPrintWARNINGDefault</span><span class="p">(</span><span class="p">)</span>
	<span class="c1">// 初始化Engine结构体
</span><span class="c1"></span>	<span class="nx">engine</span> <span class="o">:=</span> <span class="nf">New</span><span class="p">(</span><span class="p">)</span>
	<span class="c1">// 使用一个日志中间件，recovery()在单个goroutine捕获接下来处理的异常，防止主进程异常退出
</span><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nf">Logger</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="nf">Recovery</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">engine</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里最重要的就是 New() 函数。背后就是 Engine结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Engine</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// 路由分组结构体
</span><span class="c1"></span>	<span class="nx">RouterGroup</span>
	<span class="c1">// 当路由不匹配，是否自动重定向请求 /foo/ 301  /foo
</span><span class="c1"></span>	<span class="nx">RedirectTrailingSlash</span> <span class="kt">bool</span>
	<span class="c1">// 当路由不匹配尝试自动修复路由在匹配，例如 /FOO and /..//Foo 更正到 /foo
</span><span class="c1"></span>	<span class="nx">RedirectFixedPath</span> <span class="kt">bool</span>
	<span class="c1">// 开启，如果未匹配则返回 405不被允许，否则返回 404
</span><span class="c1"></span>	<span class="nx">HandleMethodNotAllowed</span> <span class="kt">bool</span>

	<span class="c1">// 用于获取client真是ip，例如头 X-Forwarded-For X-Appengine-Remote-Addr
</span><span class="c1"></span>	<span class="nx">ForwardedByClientIP</span>    <span class="kt">bool</span>
	<span class="c1">// #726 #755 If enabled, it will thrust some headers starting with
</span><span class="c1"></span>	<span class="c1">// &#39;X-AppEngine...&#39; for better integration with that PaaS.
</span><span class="c1"></span>	<span class="nx">AppEngine</span> <span class="kt">bool</span>

	<span class="c1">// true url.RawPath 会被用来查找参数 默认false
</span><span class="c1"></span>	<span class="nx">UseRawPath</span> <span class="kt">bool</span>
	<span class="c1">// 如果true， path value 会被保留
</span><span class="c1"></span>	<span class="c1">// 如果 UseRawPath是false(默认)，UnescapePathValues为true  url.Path会被保留并使用
</span><span class="c1"></span>	<span class="nx">UnescapePathValues</span> <span class="kt">bool</span>

	<span class="c1">// Value of &#39;maxMemory&#39; param that is given to http.Request&#39;s ParseMultipartForm
</span><span class="c1"></span>	<span class="c1">// method call.
</span><span class="c1"></span>	<span class="nx">MaxMultipartMemory</span> <span class="kt">int64</span>

	<span class="nx">delims</span>           <span class="nx">render</span><span class="p">.</span><span class="nx">Delims</span>
	<span class="nx">secureJsonPrefix</span> <span class="kt">string</span>
	<span class="nx">HTMLRender</span>       <span class="nx">render</span><span class="p">.</span><span class="nx">HTMLRender</span>
	<span class="nx">FuncMap</span>          <span class="nx">template</span><span class="p">.</span><span class="nx">FuncMap</span>
	<span class="c1">// 注册方法处理链
</span><span class="c1"></span>	<span class="nx">allNoRoute</span>       <span class="nx">HandlersChain</span>
	<span class="nx">allNoMethod</span>      <span class="nx">HandlersChain</span>
	<span class="nx">noRoute</span>          <span class="nx">HandlersChain</span>
	<span class="nx">noMethod</span>         <span class="nx">HandlersChain</span>
	<span class="nx">pool</span>             <span class="nx">sync</span><span class="p">.</span><span class="nx">Pool</span>
	<span class="c1">// 每个请求方法后面对应一颗树(基树)
</span><span class="c1"></span>	<span class="nx">trees</span>            <span class="nx">methodTrees</span>
<span class="p">}</span>

<span class="c1">// 可以看到对 Engine 的默认值进行处理
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span><span class="nx">Engine</span> <span class="p">{</span>
	<span class="nf">debugPrintWARNINGNew</span><span class="p">(</span><span class="p">)</span>
	<span class="nx">engine</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Engine</span><span class="p">{</span>
		<span class="nx">RouterGroup</span><span class="p">:</span> <span class="nx">RouterGroup</span><span class="p">{</span>
			<span class="nx">Handlers</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
			<span class="nx">basePath</span><span class="p">:</span> <span class="s">&#34;/&#34;</span><span class="p">,</span>
			<span class="nx">root</span><span class="p">:</span>     <span class="kc">true</span><span class="p">,</span>
		<span class="p">}</span><span class="p">,</span>
		<span class="nx">FuncMap</span><span class="p">:</span>                <span class="nx">template</span><span class="p">.</span><span class="nx">FuncMap</span><span class="p">{</span><span class="p">}</span><span class="p">,</span>
		<span class="nx">RedirectTrailingSlash</span><span class="p">:</span>  <span class="kc">true</span><span class="p">,</span>
		<span class="nx">RedirectFixedPath</span><span class="p">:</span>      <span class="kc">false</span><span class="p">,</span>
		<span class="nx">HandleMethodNotAllowed</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
		<span class="nx">ForwardedByClientIP</span><span class="p">:</span>    <span class="kc">true</span><span class="p">,</span>
		<span class="nx">AppEngine</span><span class="p">:</span>              <span class="nx">defaultAppEngine</span><span class="p">,</span>
		<span class="nx">UseRawPath</span><span class="p">:</span>             <span class="kc">false</span><span class="p">,</span>
		<span class="nx">UnescapePathValues</span><span class="p">:</span>     <span class="kc">true</span><span class="p">,</span>
		<span class="nx">MaxMultipartMemory</span><span class="p">:</span>     <span class="nx">defaultMultipartMemory</span><span class="p">,</span>
		<span class="nx">trees</span><span class="p">:</span>                  <span class="nb">make</span><span class="p">(</span><span class="nx">methodTrees</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span><span class="p">,</span>
		<span class="nx">delims</span><span class="p">:</span>                 <span class="nx">render</span><span class="p">.</span><span class="nx">Delims</span><span class="p">{</span><span class="nx">Left</span><span class="p">:</span> <span class="s">&#34;{{&#34;</span><span class="p">,</span> <span class="nx">Right</span><span class="p">:</span> <span class="s">&#34;}}&#34;</span><span class="p">}</span><span class="p">,</span>
		<span class="nx">secureJsonPrefix</span><span class="p">:</span>       <span class="s">&#34;while(1);&#34;</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="nx">engine</span><span class="p">.</span><span class="nx">RouterGroup</span><span class="p">.</span><span class="nx">engine</span> <span class="p">=</span> <span class="nx">engine</span>
	<span class="c1">// context pool 减少context重新申请带来的开销
</span><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nx">New</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{</span><span class="p">}</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">engine</span><span class="p">.</span><span class="nf">allocateContext</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">engine</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上述对结构体每个元素进行了翻译， 其中重要的就要数 RouterGroup，Context，各类 handlers  及 methodTrees 后面做详细解释。</p>
<h2 id="engineget">engine.GET()</h2>
<p>这里就涉及到了路由注册，GET 注册方法，/health 注册路径，后续就是处理方法，具体实现在RouterGroup结构体中，来初步了解一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// GET is a shortcut for router.Handle(&#34;GET&#34;, path, handle).
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">GET</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="nx">HandlersChain</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
	<span class="c1">// 计算合规的绝对路径，如果有 basePath 则 basePath + relativePath
</span><span class="c1"></span>	<span class="nx">absolutePath</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">calculateAbsolutePath</span><span class="p">(</span><span class="nx">relativePath</span><span class="p">)</span>
	<span class="c1">// 向后追加处理方法，但是总handles长度不能超过 63
</span><span class="c1"></span>	<span class="nx">handlers</span> <span class="p">=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span><span class="p">)</span>
	<span class="c1">// 在 methodTrees 此方法，此路由下，重置 handlers。
</span><span class="c1"></span>	<span class="nx">group</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nf">addRoute</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">absolutePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">returnObj</span><span class="p">(</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// RouterGroup is used internally to configure router, a RouterGroup is associated with
</span><span class="c1"></span><span class="c1">// a prefix and an array of handlers (middleware).
</span><span class="c1"></span><span class="c1">// 路由匹配器
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">RouterGroup</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">// 注册到此路由下的所有处理方法， []HandlerFunc （type HandlerFunc func(*Context)）
</span><span class="c1"></span>	<span class="nx">Handlers</span> <span class="nx">HandlersChain</span>
	<span class="c1">// 基础路径，例如 /system 分组路径前缀
</span><span class="c1"></span>	<span class="nx">basePath</span> <span class="kt">string</span>
	<span class="c1">// engine 结构，多用于操作里面的 methodTrees， 或取其他 Handlers (noRoute...)
</span><span class="c1"></span>	<span class="nx">engine</span>   <span class="o">*</span><span class="nx">Engine</span>
	<span class="c1">// true ， 根路径， basePath=/
</span><span class="c1"></span>	<span class="nx">root</span>     <span class="kt">bool</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上逻辑，就把路由注册好了。则还剩最后一步。</p>
<h2 id="enginerun">engine.Run()</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">engine</span> <span class="o">*</span><span class="nx">Engine</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">addr</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// 打印错误
</span><span class="c1"></span>	<span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span> <span class="nf">debugPrintError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">}</span><span class="p">(</span><span class="p">)</span>
	<span class="c1">// 如果不传入地址，默认有一个监听端口
</span><span class="c1"></span>	<span class="nx">address</span> <span class="o">:=</span> <span class="nf">resolveAddress</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span>
	<span class="nf">debugPrint</span><span class="p">(</span><span class="s">&#34;Listening and serving HTTP on %s\n&#34;</span><span class="p">,</span> <span class="nx">address</span><span class="p">)</span>
	<span class="c1">// 其实就是包装的 http 包快速 TCP网络上 addr 地址的监听，
</span><span class="c1"></span>	<span class="c1">// engine 是实现了  type Handler interface { ServeHTTP(ResponseWriter, *Request) }
</span><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="nx">engine</span><span class="p">)</span>
	<span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>很简单，其实就是对，http.ListenAndServe() 进行了包装，传入了自己的 Handler, 也就是Engine。之所以这么简单，是因为Golang在http包上面已经为我们封装的很完善了。</p>
<h2 id="上述不足之处">上述不足之处</h2>
<p>虽然我们可以看到三行代码就能启动http服务，但是上述这种方式还是有诸多不足之处。比如：</p>
<ol>
<li>未设置Gin框架运行模式，存在debug调试输出等。</li>
<li>未设置http.Server 中的参数，比如重要的读写超时时间设置。</li>
<li>启动和退出对于生产项目中不太优雅。</li>
</ol>
<h2 id="个人常用实践">个人常用实践</h2>
<p>启动时根据运行环境进行Server定制，正常退出或者涉及到信号量的处理，最后把申请的资源释放。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;os/signal&#34;</span>
	<span class="s">&#34;syscall&#34;</span>
	<span class="s">&#34;time&#34;</span>

	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">engine</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span>
	<span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;RUN_ENV&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#34;release&#34;</span> <span class="p">{</span>
		<span class="nx">gin</span><span class="p">.</span><span class="nf">SetMode</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nx">ReleaseMode</span><span class="p">)</span>
		<span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="p">)</span>
		<span class="c1">// 注册一个全局recovery 防止因某个goroutine异常,导致主进程退出
</span><span class="c1"></span>		<span class="c1">// 可采用自己的日志输出实现
</span><span class="c1"></span>		<span class="c1">// SkipPaths []string 可添加，用于过滤health检查等Path
</span><span class="c1"></span>		<span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nf">Recovery</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// 可路由分组，后期介绍
</span><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/health&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span> <span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&#34;ok&#34;</span><span class="p">)</span> <span class="p">}</span><span class="p">)</span>

	<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
		<span class="nx">Addr</span><span class="p">:</span>         <span class="s">&#34;:8080&#34;</span><span class="p">,</span>
		<span class="nx">Handler</span><span class="p">:</span>      <span class="nx">engine</span><span class="p">,</span>
		<span class="nx">ReadTimeout</span><span class="p">:</span>  <span class="mi">120</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
		<span class="nx">WriteTimeout</span><span class="p">:</span> <span class="mi">120</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
		<span class="nx">ErrorLog</span><span class="p">:</span>     <span class="kc">nil</span><span class="p">,</span> <span class="c1">// 可选日志
</span><span class="c1"></span>	<span class="p">}</span>
	<span class="c1">// 这里用 goroutine 包一下，当监听异常也可以不影响主进程
</span><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span><span class="p">(</span><span class="p">)</span>

	<span class="c1">// 信号量, 用它柱塞主进程，对不同信号做出反应
</span><span class="c1"></span>	<span class="nf">signalAccept</span><span class="p">(</span><span class="p">)</span>
  <span class="c1">// 如果退出，在释放一些之前申请的资源，例如 db等。 db.Close()
</span><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;程序退出&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">signalAccept</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// 不同的信号量不同的处理方式
</span><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGHUP</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGQUIT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">)</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">si</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
		<span class="k">switch</span> <span class="nx">si</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGQUIT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">:</span>
			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
			<span class="c1">// 退出程序
</span><span class="c1"></span>			<span class="k">return</span>
		<span class="k">case</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGHUP</span><span class="p">:</span>
			<span class="c1">// 程序不退出，但是可以执行一些reload操作， 比如reload config等
</span><span class="c1"></span>		<span class="k">default</span><span class="p">:</span>
			<span class="c1">// 可选择实现，退出程序
</span><span class="c1"></span>			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="结语">结语</h2>
<p>因为Golang语言http包已经封装了很多，不用框架，也可以几行代码实现HTTP服务，Gin在这一块的包装只是更加实用方便了，提供了很多快捷方法，替换了http包中一些组件原本实现，比如路由匹配，Context等等。这章节讲解的内容并不多，只是给出了个人常用实践。后期将在记录Gin框架其他细节实现。</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/" term="技术笔记" label="技术笔记" />
                            
                        
                    
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/golang/" term="golang" label="golang" />
                            
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/gin/" term="gin" label="gin" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Golang-Gin WEB框架概述及分析目录</title>
            <link rel="alternate" type="text/html" href="https://www.huzhongqing.com/posts/gin/gin%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%88%86%E6%9E%90%E7%9B%AE%E5%BD%95/" />
            <id>https://www.huzhongqing.com/posts/gin/gin%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%88%86%E6%9E%90%E7%9B%AE%E5%BD%95/</id>
            <updated>2020-01-17T15:02:42+08:00</updated>
            <published>2020-01-17T09:18:52+08:00</published>
            <author>
                    <name>huzhongqing</name>
                    <uri>https://www.huzhongqing.com/</uri>
                    <email>zhongqing2016@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[善于回顾，走过的路，时长看看，说不定能发现更多的惊喜！ Gin WEB框架，从开源到至今都一直秉承着简洁的设计理念，快！快！快！是它的代名称。简单，高效，灵活，是越来越多人喜欢它的理由。 Martini-like API风格，模块化设……]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>善于回顾，走过的路，时长看看，说不定能发现更多的惊喜！</p>
</blockquote>
<p><strong><a href="https://github.com/gin-gonic/gin">Gin</a></strong> WEB框架，从开源到至今都一直秉承着简洁的设计理念，快！快！快！是它的代名称。简单，高效，灵活，是越来越多人喜欢它的理由。
Martini-like API风格，模块化设计，依赖注入带来使用便捷优势，修改过的httprouter带来高速的路由匹配性能优势。
<img src="https://raw.githubusercontent.com/huzhongqing/images/master/color.png" width="80" hegiht="100" align=right /></img></p>
<h2 id="gin能做什么v150">Gin能做什么（v1.5.0）</h2>
<p>Gin框架说实在的，在WEB开发过程中，做的东西其实不多，目前只专注于服务层，路由匹配，参数绑定/渲染，还有就是自定义中间件，这是它的核心功能。但是每一块功能就尽可能追求性能好，易用性高。</p>
<ol>
<li>启动HTTP(s)服务，快捷运行多服务，多监听端口，自定义HTTP配置等</li>
<li>快捷注册不同的路由请求方法，支持路由组，支持路径参数，参数获取方式多样。</li>
<li>支持多种绑定（Bind），包括路径参数，body(into structs)，HTML，Header，Multipart/Urlencoded 等。</li>
<li>支持多种渲染（Rendering）JSON，XML，YAML，JSONP，ProtoBuf，HTML</li>
<li>强大的中间件模块，提供默认的中间件，友好的中间件注入模式。</li>
<li>包装 http.Request 并提供多种快捷方法操作，Get/Set Cookie，Header，文件上传等。</li>
</ol>
<p>以上是我们用到的常用方法，不同于Beego的大而全，只专注于自己更擅长的事情，所以更轻量，上手更快！</p>
<h2 id="分析目录">分析目录</h2>
<p>后续将对Gin框架的源码进行分析，并提供示例记录。尽可能理解清楚，为什么这样设计？为什么这样实现？为什么这样使用？以及当前版本的最佳实践。</p>
<h3 id="大模块分析顺序">大模块分析顺序</h3>
<ol>
<li>注册服务</li>
<li>注册路由</li>
<li>绑定参数</li>
<li>渲染数据</li>
<li>中间件实现</li>
<li>异常处理</li>
</ol>
<h2 id="结语">结语</h2>
<p>使用Gin框架大概2年了，多数API项目都基于它构建，但是后期很少去跟进代码的Commit，以至于总感觉现在只用到了它的皮毛（虽然够用），但是还是想继续了解到深处，这样更有利于以后自己设计相关框架。并保持时刻记录分享的习惯。</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/" term="技术笔记" label="技术笔记" />
                            
                        
                    
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/golang/" term="golang" label="golang" />
                            
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/gin/" term="gin" label="gin" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Prometheus 搭建记录</title>
            <link rel="alternate" type="text/html" href="https://www.huzhongqing.com/posts/other/prometheus-deploy/" />
            <id>https://www.huzhongqing.com/posts/other/prometheus-deploy/</id>
            <updated>2020-01-17T17:07:56+08:00</updated>
            <published>2019-09-17T16:09:40+08:00</published>
            <author>
                    <name>huzhongqing</name>
                    <uri>https://www.huzhongqing.com/</uri>
                    <email>zhongqing2016@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[信任固然好，监控更重要 Prometheus 监控简单搭建思路，满足监控目标服务自发现。采用到 prometheus，grafana，confd，etcd工具搭配使用。 Prometheus负责把metrics数据从监控服务端……]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>信任固然好，监控更重要</p>
</blockquote>
<p>Prometheus 监控简单搭建思路，满足监控目标服务自发现。采用到 prometheus，grafana，confd，etcd工具搭配使用。</p>
<p>Prometheus负责把metrics数据从监控服务端抓取到本地或远端存储，Grafana通过连接Prometheus数据源，通过PromQL查询所抓取到的监控数据绘制成精美实用的报表，Grafana支持报表模版一键导入极为方便。Confd配合ETCD自动添加/更新监测任务，当服务存在N多地址时，给维护带来极大的方便。</p>
<p><strong>这里不对某一组件做详细介绍。</strong></p>
<h2 id="prometheus">Prometheus</h2>
<h3 id="搭建架构图">搭建架构图</h3>
<p><img src="https://raw.githubusercontent.com/huzhongqing/images/master/%E7%9B%91%E6%8E%A7%E6%B5%81%E7%A8%8B%E5%9B%BE.png" width="500" hegiht="600" align="center" /></img></p>
<h3 id="本文采取的部署方式及配置">本文采取的部署方式及配置</h3>
<p>本文介绍最常用的使用模式，即使用Pull目标服务的方式。通过配置不同的job和targets，实现不同的项目监控。对比Push系列(存在agent)的监控平台，在部署上有更大的优势。数据存储到本地(存在单点，可扩展/耐用性的不足，所以提供HTTP接口支持远端时序数据库)，如果数据要保证不可丢，那建议采用远端存储的方式。对于需要大数据量的查询语句，也建议迁移到远端(此处不讨论)。 <a href="https://prometheus.io/docs/prometheus/latest/storage/">存储设置参考</a></p>
<p>部署的方式主体分两种：单点部署简单方便，能够成熟较大的监控规模，缺点也显而易见，单点架构存在的毛病，他都有，哈哈，但是本身prometheus自己已经做到自治性，而且本身可靠性很强，对付一千以内的监控节点应该还是可行的。<a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/scale-prometheus-with-federation">联邦集群部署</a>(高可用，大规模监控，分区分组等)</p>
<h3 id="prometheus配置简介">Prometheus配置简介</h3>
<p>某种场景，常用<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">配置</a>介绍</p>
<ol>
<li>
<p>运行时Reload配置</p>
<ul>
<li>给进程发送信号量 SIGHUP</li>
<li>启动时开启 --web.enable-lifecycle  支持HTTP POST http://localhost:9090/-/reload</li>
</ul>
</li>
<li>
<p>指定启动配置文件(default:  /etc/prometheus/prometheus.yml)</p>
<ul>
<li>--config.file=/etc/prometheus/prometheus.yml    yaml文件，注意占位符的有效性</li>
</ul>
</li>
<li>
<p>本地存储路径</p>
<ul>
<li>--storage.tsdb.path=/prometheus</li>
</ul>
</li>
<li>
<p>开启API访问</p>
<ul>
<li>--web.enable-admin-api</li>
</ul>
</li>
<li>
<p>prometheus自己提供可视化模版，但是相对没有grafana好用，所以下面配置可以不配置</p>
<ul>
<li>--web.console.libraries=/usr/share/prometheus/console_libraries</li>
<li>--web.console.templates=/usr/share/prometheus/consoles</li>
</ul>
</li>
</ol>
<p>优选Docker容器部署，好处不用说，只要数据文件不被破坏，加上restart=always，基本可以保证服务不中断。附上 docker-compose.yml (macOS) 文件可根据下述文件适当修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">version<span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w">  </span>prometheus<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>prom/prometheus<span class="p">:</span>v2<span class="m">.10</span><span class="m">.0</span><span class="w">
</span><span class="w">    </span>ports<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span><span class="m">9090</span><span class="p">:</span><span class="m">9090</span>/tcp<span class="w">
</span><span class="w">    </span>user<span class="p">:</span><span class="w"> </span>root<span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/data/prometheus<span class="p">:</span>/prometheus<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/config/prometheus/prometheus.yml<span class="p">:</span>/etc/prometheus/prometheus.yml<span class="w">
</span><span class="w">    </span>entrypoint<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>/bin/prometheus<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>--config.file=/etc/prometheus/prometheus.yml<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>--storage.tsdb.path=/prometheus<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>--web.enable-admin-api<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>--web.enable-lifecycle<span class="w">
</span><span class="w">
</span><span class="w">    </span>restart<span class="p">:</span><span class="w"> </span>always<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="grafana">Grafana</h2>
<p>一款优秀的渲染平台，<a href="https://grafana.com/docs/">Grafana官方文档</a></p>
<p>主要是用来渲染prometheus的数据，当然grafana本身支持N多数据源。主要是它有图表仓库，对于标准的监控输出，比如node_exporter，直接可以找到别人已经配置好的模版，在线import(自己的模版也可以export)，非常方便！</p>
<p>依然docker部署，注意user不同平台处理的权限可能不同。附上 docker-compose.yml (macOS) 文件可根据下述文件适当修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">version<span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w">  </span>grafana<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>grafana/grafana<span class="p">:</span><span class="m">6.2</span><span class="m">.0</span><span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/data/grafana<span class="p">:</span>/var/lib/grafana<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/config/grafana/grafana.ini<span class="p">:</span>/etc/grafana/grafana.ini<span class="w">
</span><span class="w">    </span>ports<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span><span class="m">3000</span><span class="p">:</span><span class="m">3000</span>/tcp<span class="w">
</span><span class="w">    </span>user<span class="p">:</span><span class="w"> </span>grafana<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>至此以上两个容器就能够基本跑出demo版本的监控系统了。但是对于可维护性还有一些欠缺，所以接下来使用 confd+etcd做prometheus的服务发现，当然prometheus本身支持很多种SD方式。<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">服务发现</a>，但对于etcd的使用因为没有标准，所以prometheus本身不提供支持。</p>
</blockquote>
<h2 id="confd">Confd</h2>
<p>confd 轻量级配置管理工具，支持go template模版语法。保持本地配置最新，同时具备定期探测机制，配置变更自动reload。其后端支持的数据类型有：etcd、consul、vault、environment variables、redis、zookeeper、dynamodb、stackengine、rancher。不过一般使用Confd和etcd的配合使用比较多。</p>
<h3 id="配置-针对于etcd">配置-针对于etcd</h3>
<ul>
<li>-onetime 执行一次就退出，相当于请求一下etcd解析成对应的模版。</li>
<li>-backend=etcdv3  默认是 etcd v2 版本</li>
<li>-node=http://127.0.0.1:2379  // etcd 连接地址</li>
<li>-watch 开启watch功能，etcd变更自动变更配置文件。</li>
</ul>
<p>还有一些关于密码连接的问题，demo环境暂时未测试。</p>
<p>此服务不建容器部署，因为文件映射，reload命令执行等都可能产生不便。对此容器需要别较高的定制，如果出现nginx reload 类似的情况，还是物理机部署来的可靠方便。但是也可以容器部署，部署的方式及思路，(本地启动在此包括了) 如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> golang:1.10.2-alpine as builder</span><span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="k">ARG</span> <span class="nv">CONFD_VERSION</span><span class="o">=</span><span class="m">0</span>.16.0<span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="k">ADD</span> https://github.com/kelseyhightower/confd/archive/v<span class="si">${</span><span class="nv">CONFD_VERSION</span><span class="si">}</span>.tar.gz /tmp/<span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk add --no-cache <span class="se">\
</span><span class="se"></span>    bzip2 <span class="se">\
</span><span class="se"></span>    make <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  mkdir -p /go/src/github.com/kelseyhightower/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  <span class="nb">cd</span> /go/src/github.com/kelseyhightower/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  tar --strip-components<span class="o">=</span><span class="m">1</span> -zxf /tmp/v<span class="si">${</span><span class="nv">CONFD_VERSION</span><span class="si">}</span>.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  go install github.com/kelseyhightower/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  rm -rf /tmp/v<span class="si">${</span><span class="nv">CONFD_VERSION</span><span class="si">}</span>.tar.gz<span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> alpine:3.7</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /go/bin/confd /bin/confd<span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk add --no-cache curl<span class="err">
</span><span class="err"></span><span class="k">RUN</span> chmod +x /bin/confd <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>    mkdir -p /etc/confd/<span class="o">{</span>conf.d,templates<span class="o">}</span><span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;confd&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><ol>
<li>mkdir -p /etc/confd/{conf.d,templates} 是放 confd 默认配置和模版文件的位置，可以根据不同的容器提前把配置和模版构建到镜像内</li>
<li>配置文件需要执行的 cmd ，要在容器内安装好</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">version<span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w">  </span>confd<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>confd<span class="p">:</span><span class="m">0.16</span><span class="m">.0</span><span class="w">
</span><span class="w">    </span><span class="c"># 在物理机上面管理配置及模版文件  </span><span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/data/templates<span class="p">:</span>/etc/confd/templates<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/data/conf.d<span class="p">:</span>/etc/confd/conf.d<span class="w">
</span><span class="w">      </span><span class="c"># 把目标文件写入到指定位置，容器文件变更影响宿主机。</span><span class="w">
</span><span class="w">      </span><span class="c"># 例如prometheus的配置文件，就要映射到主机~/.confd/server/prometheus.yml</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>~/.confd/server<span class="p">:</span>/server/conf.d<span class="w">
</span><span class="w">    </span><span class="c"># 也可以调用配置sh</span><span class="w">
</span><span class="w">    </span>entrypoint<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>/bin/confd<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>-backend=etcdv3<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>-node=http<span class="p">:</span>//<span class="m">192.168</span><span class="m">.2</span><span class="m">.96</span><span class="p">:</span><span class="m">2379</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>-watch<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>PS: <strong>prometheus.conf.toml  放到volumes映射的conf.d文件夹内</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">template</span><span class="p">]</span>
<span class="nx">prefix</span> <span class="p">=</span> <span class="s2">&#34;/prometheus&#34;</span>
<span class="nx">src</span> <span class="p">=</span> <span class="s2">&#34;prometheus.conf.tmpl&#34;</span>
<span class="nx">dest</span> <span class="p">=</span> <span class="s2">&#34;/server/conf.d/prometheus.yml&#34;</span>
<span class="nx">mode</span> <span class="p">=</span> <span class="s2">&#34;0644&#34;</span>
<span class="nx">keys</span> <span class="p">=</span> <span class="p">[</span>
 <span class="s2">&#34;/job&#34;</span><span class="p">,</span>
<span class="p">]</span>
<span class="nx">reload_cmd</span> <span class="p">=</span> <span class="s2">&#34;curl -X POST http://192.168.2.96:9090/-/reload&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>解释：</p>
<ol>
<li>prefix = etcd key 的前缀</li>
<li>src = 加载的模版文件名称，这里是采用默认目录</li>
<li>dest = 模版文件通过解析后，生成的文件及地址</li>
<li>keys = 二级目录拆分，为后面的模版语法服务</li>
<li>reload_cmd = 当发现配置文件变更后，执行的cmd，请求prometheus热加载配置的接口</li>
</ol>
<p>PS: <strong>prometheus.conf.tmpl 放到volumes映射的templates文件夹内</strong></p>
<pre><code class="language-templates" data-lang="templates">global:
  scrape_interval: 15s
scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']
{{range $label := ls &quot;/job&quot; }}
  - job_name: '{{base $label}}'
    scrape_interval: 5s
    static_configs:
{{$job_name := printf &quot;/job/%s/*&quot; $label}}{{range gets $job_name}}
      - targets: [{{.Value}}]
        labels:
             instance: '{{base .Key}}'
{{end}}
{{end}}
</code></pre><p>解释：</p>
<ol>
<li>提供一些内置函数，满足go template的<a href="https://golang.org/pkg/text/template/">模版语法</a></li>
</ol>
<h2 id="添加执行任务示例">添加执行任务示例</h2>
<p>jobx 任务  subJobx 子任务模块</p>
<blockquote>
<p>ETCDCTL_API=3 etcdctl put /prometheus/job/jobx/subJobx '127.0.0.1:10010'</p>
</blockquote>
<p>查看prometheus容器映射的配置文件</p>
<blockquote>
<p>cat ~/.confd/server/prometheus.yml</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">global:
  scrape_interval: 15s
scrape_configs:
  - job_name: &#39;prometheus&#39;
    scrape_interval: 5s
    static_configs:
      - targets: [&#39;localhost:9090&#39;]

  - job_name: &#39;jobx&#39;
    scrape_interval: 5s
    static_configs:

      - targets: [&#39;127.0.0.1:10010&#39; ]
        labels:
             instance: &#39;subJobx&#39;
</code></pre></td></tr></table>
</div>
</div><p>在jobx任务下，添加第二个子任务</p>
<blockquote>
<p>ETCDCTL_API=3 etcdctl put /prometheus/job/jobx/subJobx1 '127.0.0.2:10010'</p>
</blockquote>
<p>此时可以去看prometheus后台<a href="http://localhost:9090/targets">http://localhost:9090/targets</a>看任务是否添加成功。如果要删除任务，直接删除key就可以了</p>
<h2 id="etcd">ETCD</h2>
<p>ETCD用处不用多说，主要是搭建简单，使用简单，协议理解简单。提供HTTPAPI(v2),gRPC watch(v3)。存储(bblot)高性能，又支持多版本。爽歪歪！搭建起来就完事了。可集群可单点，此文Docker单点</p>
<p>因为ETCD只是作为demo搭建，所以没有什么特别的参数，线上环境是需要根据机器配置，存储介质和网络环境等，调整一定的参数。附上 docker-compose.yml (macOS) 文件可根据下述文件适当修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">version<span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w">  </span>etcd<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>quay.io/coreos/etcd<span class="p">:</span>v3<span class="m">.3</span><span class="w">
</span><span class="w">    </span>user<span class="p">:</span><span class="w"> </span>root<span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>${PWD}/data<span class="p">:</span>/default.etcd<span class="w">
</span><span class="w">    </span><span class="c">#network_mode: &#39;host&#39;</span><span class="w">
</span><span class="w">    </span>ports<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span><span class="m">2379</span><span class="p">:</span><span class="m">2379</span>/tcp<span class="w">
</span><span class="w">    </span>entrypoint<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>/usr/local/bin/etcd<span class="w">
</span><span class="w">      </span>-<span class="w"> </span>--listen-client-urls=http<span class="p">:</span>//<span class="m">0.0</span><span class="m">.0</span><span class="m">.0</span><span class="p">:</span><span class="m">2379</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>--advertise-client-urls=http<span class="p">:</span>//<span class="m">0.0</span><span class="m">.0</span><span class="m">.0</span><span class="p">:</span><span class="m">2379</span><span class="w">
</span><span class="w">    </span>restart<span class="p">:</span><span class="w"> </span>always<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>整套监控涉及到4个模块，上述过程只是记录了一个最基本的搭建过程及每个模块在监控系统中承担的角色。当我们深度使用的时候一定还有很多坑要踩。此处还未研究prometheus的报警模块。每一个模块都是值得深入研究。后续也会记录更深的用法及踩坑的经验。</p>
<p>最后推荐一下写的一个小中间件<a href="https://github.com/huzhongqing/ginprom/tree/master">ginprom</a>http exporter。如果项目在gin路由框架下，监控API访问量，耗时，流量，服务资源消耗等，可以快速接入prometheus的监控。</p>
<h2 id="参考连接">参考连接</h2>
<ol>
<li><a href="https://prometheus.io/docs/introduction/overview/">官方文档</a></li>
<li><a href="https://www.cnblogs.com/vovlie/p/7709312.html?utm_source=debugrun&amp;utm_medium=referral">剖析Prometheus的内部存储机制</a></li>
<li><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart">Prometheus-book</a></li>
</ol>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/" term="技术笔记" label="技术笔记" />
                            
                        
                    
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/%E7%9B%91%E6%8E%A7/" term="监控" label="监控" />
                            
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/prometheus/" term="prometheus" label="prometheus" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Mongodb Log Cutting</title>
            <link rel="alternate" type="text/html" href="https://www.huzhongqing.com/posts/other/mongodb-log-cutting/" />
            <id>https://www.huzhongqing.com/posts/other/mongodb-log-cutting/</id>
            <updated>2020-01-17T16:58:31+08:00</updated>
            <published>2019-06-27T13:11:39+08:00</published>
            <author>
                    <name>huzhongqing</name>
                    <uri>https://www.huzhongqing.com/</uri>
                    <email>zhongqing2016@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[不积硅步无以至千里 mongodb 运行日志，如果长期不进行滚动切割，会导致单日志文件过大，影响日志的写入与读取。所以可以通过给mongodb进程发送信号，让主进程自动切割日志 此脚本的功能是：定时切割日志，并保存X天……]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>不积硅步无以至千里</p>
</blockquote>
<p>mongodb 运行日志，如果长期不进行滚动切割，会导致单日志文件过大，影响日志的写入与读取。所以可以通过给mongodb进程发送信号，让主进程自动切割日志
此脚本的功能是：定时切割日志，并保存X天数的日志量。</p>
<p>请适当的修改内部参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="c1"># crond cutting mongodb.log</span> 
<span class="nv">pidPath</span><span class="o">=</span>/data/mongodb/db/mongod.lock
<span class="nv">logPath</span><span class="o">=</span>/data/mongodb/log/

<span class="nv">PATH</span><span class="o">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
<span class="nb">export</span> PATH
<span class="nb">kill</span> -SIGUSR1 <span class="k">$(</span>cat <span class="si">${</span><span class="nv">pidPath</span><span class="si">}</span><span class="k">)</span>
find <span class="s2">&#34;</span><span class="si">${</span><span class="nv">logPath</span><span class="si">}</span><span class="s2">&#34;</span> -mtime +7 -name <span class="s2">&#34;mongod.log*&#34;</span> -exec rm -rf <span class="o">{</span><span class="o">}</span> <span class="se">\;</span>

</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/" term="技术笔记" label="技术笔记" />
                            
                        
                    
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/sh/" term="sh" label="sh" />
                            
                        
                            
                            
                            
                                <category scheme="https://www.huzhongqing.com/tags/mongodb/" term="mongodb" label="mongodb" />
                            
                        
                    
                
            
        </entry>
    
</feed>